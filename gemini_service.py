import os
import requests
import json
import logging
from typing import Dict, Optional
import dotenv
# Load environment variables
dotenv.load_dotenv()

logger = logging.getLogger(__name__)

class GeminiService:
    def __init__(self):
        self.api_key = os.getenv("GEMINI_API_KEY", "your-api-key-here")
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
    
    def generate_code(self, prompt: str, language: str) -> Dict:
        """Generate code using Gemini API"""
        try:
            # Create appropriate prompt based on language
            if language == 'html':
                full_prompt = f"""
                Create a complete, responsive, modern HTML page for: {prompt}
                
                Requirements:
                - Include HTML5 structure with <!DOCTYPE html>
                - Add responsive CSS styling with modern design
                - Include JavaScript for interactivity if needed
                - Make it visually appealing with proper colors and layout
                - Ensure it's W3C compliant
                - Add appropriate meta tags
                
                Return only the complete HTML code without any explanatory text.
                """
            else:
                full_prompt = f"""
                Generate a {language} code snippet for: {prompt}
                
                Requirements:
                - Include proper comments explaining the logic
                - Add error handling where appropriate
                - Include example usage or test cases
                - Follow best practices for {language}
                - Make the code clean and readable
                
                Return only the code without any explanatory text or markdown formatting.
                """
            
            # Prepare request
            headers = {"Content-Type": "application/json"}
            params = {"key": self.api_key}
            data = {
                "contents": [{
                    "parts": [{"text": full_prompt}]
                }],
                "generationConfig": {
                    "temperature": 0.7,
                    "topK": 40,
                    "topP": 0.95,
                    "maxOutputTokens": 2048,
                }
            }
            
            logger.debug(f"Sending request to Gemini API for {language} code generation")
            
            # Make API call
            response = requests.post(
                self.base_url,
                headers=headers,
                params=params,
                json=data,
                timeout=30
            )
            
            response.raise_for_status()
            result = response.json()
            
            # Extract generated code
            if 'candidates' in result and len(result['candidates']) > 0:
                code = result['candidates'][0]['content']['parts'][0]['text']
                
                # Clean up the code (remove markdown formatting if present)
                code = code.strip()
                if code.startswith('```'):
                    lines = code.split('\n')
                    # Remove first line (```language) and last line (```)
                    if lines[-1].strip() == '```':
                        code = '\n'.join(lines[1:-1])
                    else:
                        code = '\n'.join(lines[1:])
                
                return {
                    'success': True,
                    'code': code,
                    'language': language
                }
            else:
                logger.error(f"No candidates in Gemini API response: {result}")
                return {
                    'success': False,
                    'error': 'No code generated by AI model'
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed: {str(e)}")
            return {
                'success': False,
                'error': f'API request failed: {str(e)}'
            }
        except KeyError as e:
            logger.error(f"Unexpected API response format: {str(e)}")
            return {
                'success': False,
                'error': 'Unexpected response format from AI service'
            }
        except Exception as e:
            logger.error(f"Unexpected error in code generation: {str(e)}")
            return {
                'success': False,
                'error': f'Code generation failed: {str(e)}'
            }

# Create service instance
gemini_service = GeminiService()
