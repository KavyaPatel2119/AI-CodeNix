import os
import io
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Preformatted
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor
from flask import make_response
import logging

logger = logging.getLogger(__name__)

class ExportService:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom styles for the PDF export"""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=18,
            spaceAfter=30,
            textColor=HexColor('#00f5ff'),
            fontName='Helvetica-Bold'
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=20,
            textColor=HexColor('#8a2be2'),
            fontName='Helvetica-Bold'
        ))
        
        # Code style
        self.styles.add(ParagraphStyle(
            name='CodeStyle',
            parent=self.styles['Code'],
            fontSize=9,
            fontName='Courier',
            leftIndent=0.25*inch,
            rightIndent=0.25*inch,
            spaceAfter=12,
            spaceBefore=12,
            backColor=HexColor('#f8f8f8'),
            textColor=HexColor('#333333'),
            borderColor=HexColor('#00f5ff'),
            borderWidth=1,
            borderPadding=8
        ))
        
        # Info style
        self.styles.add(ParagraphStyle(
            name='InfoStyle',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=HexColor('#6c757d'),
            spaceAfter=10
        ))
    
    def export_as_text(self, code_data):
        """Export code as plain text file"""
        try:
            # Create text content
            content = f"""AI CodeNix - Generated Code
{'=' * 50}

Title: {code_data.get('title', 'Generated Code')}
Language: {code_data['language'].upper()}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Prompt: {code_data['prompt']}

{'=' * 50}
CODE:
{'=' * 50}

{code_data['code']}

{'=' * 50}
Generated by AI CodeNix
"""
            
            # Create response
            response = make_response(content)
            response.headers['Content-Type'] = 'text/plain'
            response.headers['Content-Disposition'] = f'attachment; filename="code_{code_data["language"]}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt"'
            
            return response
            
        except Exception as e:
            logger.error(f"Error exporting as text: {str(e)}")
            raise
    
    def export_as_pdf(self, code_data):
        """Export code as PDF file"""
        try:
            # Create PDF buffer
            buffer = io.BytesIO()
            
            # Create PDF document
            doc = SimpleDocTemplate(
                buffer,
                pagesize=letter,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            # Build content
            story = []
            
            # Title
            title = Paragraph("AI CodeNix - Generated Code", self.styles['CustomTitle'])
            story.append(title)
            story.append(Spacer(1, 20))
            
            # Metadata
            metadata_content = f"""
            <b>Language:</b> {code_data['language'].upper()}<br/>
            <b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>
            <b>Title:</b> {code_data.get('title', 'Generated Code')}
            """
            metadata = Paragraph(metadata_content, self.styles['InfoStyle'])
            story.append(metadata)
            story.append(Spacer(1, 20))
            
            # Prompt section
            prompt_title = Paragraph("Prompt:", self.styles['CustomSubtitle'])
            story.append(prompt_title)
            
            prompt_text = Paragraph(code_data['prompt'], self.styles['Normal'])
            story.append(prompt_text)
            story.append(Spacer(1, 20))
            
            # Code section
            code_title = Paragraph("Generated Code:", self.styles['CustomSubtitle'])
            story.append(code_title)
            
            # Format code - use Preformatted directly with the code
            code_para = Preformatted(code_data['code'], self.styles['CodeStyle'])
            story.append(code_para)
            
            # Footer
            story.append(Spacer(1, 30))
            footer = Paragraph("Generated by AI CodeNix - Code the Future", self.styles['InfoStyle'])
            story.append(footer)
            
            # Build PDF
            doc.build(story)
            
            # Get PDF data
            pdf_data = buffer.getvalue()
            buffer.close()
            
            # Create response
            response = make_response(pdf_data)
            response.headers['Content-Type'] = 'application/pdf'
            response.headers['Content-Disposition'] = f'attachment; filename="code_{code_data["language"]}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf"'
            
            return response
            
        except Exception as e:
            logger.error(f"Error exporting as PDF: {str(e)}")
            raise

# Create service instance
export_service = ExportService()